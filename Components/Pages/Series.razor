@page "/{SeriesName}/{Year}"
@using NascarCalendar.Services
@using Models = NascarCalendar.Models
@using NascarCalendar.Components.Shared
@inject ICalendarService CalendarService
@inject ISeriesService SeriesService
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>@GetPageTitle()</PageTitle>

<h1>NASCAR Schedule @Year</h1>

<SeriesPicker SeriesIdentifier=@SeriesName Year=@Year/>

<YearPicker SeriesName=@SeriesName Year=@Year/>

@if (error != "")
{
    <ErrorMessage Message=@error/>
}

@if (races == null)
{
    @if (error == "")
    {
        <MySpinner />
    }
}
else
{
    <div>
    @foreach (var race in races.Select((value, index) => new { index, value }))
    {
        <Race Series="@SeriesName" RaceIndex=@race.index/>
    }
    </div>
}

@code {
    [Parameter, EditorRequired]
    public string SeriesName { get; set; }

    [Parameter, EditorRequired]
    public string Year { get; set; }

    private string error = "";
    private List<Models.Race> races = null;

    protected override async Task OnInitializedAsync()
    {
        try {
            CheckURL();

            await CalendarService.GetCalendar(Year);

            races = CalendarService.GetSeries(SeriesName);
        } catch (Exception e) {
            error = e.Message;
        }
    }

    private void CheckURL()
    {
        CheckURLSeriesName();
        CheckURLYear();
    }

    private void CheckURLSeriesName()
    {
        var msg = "Invalid series identifier used in the URL. ";

        if (SeriesName != "series_1" && SeriesName != "series_2" && SeriesName != "series_3")
        {
            throw new Exception(msg + GetURLErrorMessage());
        }

        return;
    }

    private void CheckURLYear()
    {
        int year;
        var msg = "Invalid year used in the URL. ";

        try {
            year = Int32.Parse(Year);
        } catch (Exception e) {
            throw new Exception(msg + GetURLErrorMessage());
        }

        if (year < 2015 || year > 2024)
        {
            throw new Exception(msg + GetURLErrorMessage());
        }

        return;
    }

    private string GetURLErrorMessage()
    {
        var error = "The proper URL format is `/{SeriesName}/{Year}`,";
        error += " where {SeriesName} is 'series_1', 'series_2', or 'series_3',";
        error += " and {Year} is a 4-digit number between 2015 and 2024.";

        return error;
    }

    private string GetPageTitle()
    {
        if (error == "") {
            if (Int32.TryParse(Year, out int year)) {
                return "Schedule for the " + Year + " " + SeriesService.GetSeriesName(SeriesName, year);
            }
        }

        return "Error";
    }
}
