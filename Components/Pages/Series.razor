@*
 * This page displays the schedule for a specific series in a specific year.
 *@

@page "/{SeriesIdentifier}/{Year:int}"
@using NascarCalendar.Services
@using Models = NascarCalendar.Models
@using NascarCalendar.Components.Shared
@inject ICalendarService CalendarService
@inject ISeriesService SeriesService
@inject IErrorService ErrorService
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>@GetPageTitle()</PageTitle>

<h1>NASCAR Schedule @Year</h1>

<SeriesPicker SeriesIdentifier=@SeriesIdentifier Year=@Year/>

<YearPicker SeriesIdentifier=@SeriesIdentifier Year=@Year/>

@if (error != "")
{
    <ErrorMessage Message=@error/>
}

@if (races == null)
{
    @if (error == "")
    {
        <MySpinner />
    }
}
else
{
    <div>
    @foreach (var race in races.Select((value, index) => new { index, value }))
    {
        <Race SeriesIdentifier="@SeriesIdentifier" RaceIndex=@race.index/>
    }
    </div>
}

@code {
    [Parameter, EditorRequired]
    public string SeriesIdentifier { get; set; } = default!;

    [Parameter, EditorRequired]
    public int Year { get; set; }

    private string error = "";
    private List<Models.Race> races = [];

    protected override async Task OnInitializedAsync()
    {
        try {
            ErrorService.CheckPageURL(SeriesIdentifier, Year);

            await CalendarService.GetCalendar(Year);

            races = CalendarService.GetSeries(SeriesIdentifier);
        } catch (Exception e) {
            error = e.Message;
        }
    }

    private string GetPageTitle()
    {
        if (error == "") {
            var title = "Schedule for the " + Year.ToString();
            title += " " + SeriesService.GetSeriesName(SeriesIdentifier, Year);
            return title;
        }

        return "Error";
    }
}
